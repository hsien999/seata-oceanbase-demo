// 
// Decompiled by Procyon v0.5.36
// 

package com.oceanbase.jdbc.internal.com.read.dao;

import com.oceanbase.jdbc.JDBC4ResultSet;
import java.sql.ResultSet;
import com.oceanbase.jdbc.internal.util.exceptions.ExceptionFactory;
import java.sql.SQLException;
import com.oceanbase.jdbc.internal.protocol.Protocol;
import java.util.ArrayDeque;
import java.util.Deque;
import com.oceanbase.jdbc.internal.com.read.resultset.SelectResultSet;
import com.oceanbase.jdbc.internal.com.send.parameters.ParameterHolder;
import com.oceanbase.jdbc.OceanBaseStatement;

public class Results
{
    private int statementId;
    private OceanBaseStatement statement;
    private String sql;
    private ParameterHolder[] parameters;
    private int resultSetScrollType;
    private int resultSetConcurrency;
    private boolean toCursorFetch;
    private int fetchSize;
    private SelectResultSet resultSet;
    private SelectResultSet callableResultSet;
    private Deque<SelectResultSet> executionResults;
    private boolean batch;
    private int expectedSize;
    private boolean binaryFormat;
    private int autoGeneratedKeys;
    private int maxFieldSize;
    private int autoIncrement;
    private boolean rewritten;
    private CmdInformation cmdInformation;
    private boolean batchSucceed;
    
    public Results() {
        this.statementId = 0;
        this.batchSucceed = false;
        this.statement = null;
        this.fetchSize = 0;
        this.maxFieldSize = 0;
        this.batch = false;
        this.expectedSize = 1;
        this.cmdInformation = null;
        this.binaryFormat = false;
        this.resultSetScrollType = 1003;
        this.resultSetConcurrency = 1007;
        this.autoIncrement = 1;
        this.autoGeneratedKeys = 2;
        this.sql = null;
        this.toCursorFetch = false;
    }
    
    public Results(final OceanBaseStatement statement, final int fetchSize, final boolean batch, final int expectedSize, final boolean binaryFormat, final int resultSetScrollType, final int resultSetConcurrency, final int autoGeneratedKeys, final int autoIncrement, final String sql, final ParameterHolder[] parameters) {
        this.statementId = 0;
        this.batchSucceed = false;
        this.statement = statement;
        this.fetchSize = fetchSize;
        this.batch = batch;
        this.maxFieldSize = statement.getMaxFieldSize();
        this.expectedSize = expectedSize;
        this.cmdInformation = null;
        this.binaryFormat = binaryFormat;
        this.resultSetScrollType = resultSetScrollType;
        this.resultSetConcurrency = resultSetConcurrency;
        this.autoIncrement = autoIncrement;
        this.autoGeneratedKeys = autoGeneratedKeys;
        this.sql = sql;
        this.parameters = parameters;
        this.toCursorFetch = false;
    }
    
    public void addStats(final long updateCount, final long insertId, final boolean moreResultAvailable) {
        if (this.cmdInformation == null) {
            if (this.batch) {
                this.cmdInformation = new CmdInformationBatch(this.expectedSize, this.autoIncrement);
            }
            else {
                if (!moreResultAvailable) {
                    this.cmdInformation = new CmdInformationSingle(insertId, updateCount, this.autoIncrement);
                    return;
                }
                this.cmdInformation = new CmdInformationMultiple(this.expectedSize, this.autoIncrement);
            }
        }
        this.cmdInformation.addSuccessStat(updateCount, insertId);
    }
    
    public void addStatsError(final boolean moreResultAvailable) {
        if (this.cmdInformation == null) {
            if (this.batch) {
                this.cmdInformation = new CmdInformationBatch(this.expectedSize, this.autoIncrement);
            }
            else {
                if (!moreResultAvailable) {
                    this.cmdInformation = new CmdInformationSingle(0L, -3L, this.autoIncrement);
                    return;
                }
                this.cmdInformation = new CmdInformationMultiple(this.expectedSize, this.autoIncrement);
            }
        }
        this.cmdInformation.addErrorStat();
    }
    
    public int getCurrentStatNumber() {
        return (this.cmdInformation == null) ? 0 : this.cmdInformation.getCurrentStatNumber();
    }
    
    public void addResultSet(final SelectResultSet resultSet, final boolean moreResultAvailable) {
        if (resultSet.isCallableResult()) {
            this.callableResultSet = resultSet;
            return;
        }
        if (this.executionResults == null) {
            this.executionResults = new ArrayDeque<SelectResultSet>();
        }
        this.executionResults.add(resultSet);
        if (this.cmdInformation == null) {
            if (this.batch) {
                this.cmdInformation = new CmdInformationBatch(this.expectedSize, this.autoIncrement);
            }
            else {
                if (!moreResultAvailable) {
                    this.cmdInformation = new CmdInformationSingle(0L, -1L, this.autoIncrement);
                    return;
                }
                this.cmdInformation = new CmdInformationMultiple(this.expectedSize, this.autoIncrement);
            }
        }
        this.cmdInformation.addResultSetStat();
    }
    
    public boolean isToCursorFetch() {
        return this.toCursorFetch;
    }
    
    public void setToCursorFetch(final boolean val) {
        this.toCursorFetch = val;
    }
    
    public CmdInformation getCmdInformation() {
        return this.cmdInformation;
    }
    
    protected void setCmdInformation(final CmdInformation cmdInformation) {
        this.cmdInformation = cmdInformation;
    }
    
    public boolean commandEnd() {
        if (this.cmdInformation != null) {
            if (this.executionResults != null && !this.cmdInformation.isCurrentUpdateCount()) {
                this.resultSet = this.executionResults.poll();
            }
            else {
                this.resultSet = null;
            }
            this.cmdInformation.setRewrite(this.rewritten);
        }
        else {
            this.resultSet = null;
        }
        return this.cmdInformation != null;
    }
    
    public SelectResultSet getResultSet() {
        return this.resultSet;
    }
    
    public SelectResultSet getCallableResultSet() {
        return this.callableResultSet;
    }
    
    public void loadFully(final boolean skip, final Protocol protocol) throws SQLException {
        if (this.fetchSize != 0) {
            this.fetchSize = 0;
            if (this.resultSet != null) {
                if (skip) {
                    this.resultSet.close();
                }
                else {
                    this.resultSet.fetchRemaining();
                }
            }
            else {
                final SelectResultSet firstResult = this.executionResults.peekFirst();
                if (firstResult != null) {
                    if (skip) {
                        firstResult.close();
                    }
                    else {
                        firstResult.fetchRemaining();
                    }
                }
            }
        }
        if (protocol.hasMoreResults()) {
            protocol.getResult(this);
        }
    }
    
    public void abort() throws SQLException {
        if (this.fetchSize != 0) {
            this.fetchSize = 0;
            if (this.resultSet != null) {
                this.resultSet.abort();
            }
            else {
                final SelectResultSet firstResult = this.executionResults.peekFirst();
                if (firstResult != null) {
                    firstResult.abort();
                }
            }
        }
    }
    
    public boolean isFullyLoaded(final Protocol protocol) {
        return this.fetchSize == 0 || this.resultSet == null || (this.resultSet.isFullyLoaded() && this.executionResults.isEmpty() && !protocol.hasMoreResults());
    }
    
    public boolean getMoreResults(final int current, final Protocol protocol) throws SQLException {
        if (this.fetchSize != 0 && this.resultSet != null) {
            protocol.getLock().lock();
            try {
                if (current == 1 && this.resultSet != null) {
                    this.resultSet.close();
                }
                else {
                    this.resultSet.fetchRemaining();
                }
                if (protocol.hasMoreResults()) {
                    protocol.getResult(this);
                }
            }
            catch (SQLException e) {
                throw ExceptionFactory.INSTANCE.create(e);
            }
            finally {
                protocol.getLock().unlock();
            }
        }
        if (this.cmdInformation != null && this.cmdInformation.moreResults() && !this.batch) {
            if (current == 1 && this.resultSet != null) {
                this.resultSet.close();
            }
            if (this.executionResults != null) {
                this.resultSet = this.executionResults.poll();
            }
            return this.resultSet != null;
        }
        if (current == 1 && this.resultSet != null) {
            this.resultSet.close();
        }
        this.resultSet = null;
        return false;
    }
    
    public int getFetchSize() {
        return this.fetchSize;
    }
    
    public OceanBaseStatement getStatement() {
        return this.statement;
    }
    
    public boolean isBatch() {
        return this.batch;
    }
    
    public int getExpectedSize() {
        return this.expectedSize;
    }
    
    public boolean isBinaryFormat() {
        return this.binaryFormat;
    }
    
    public void removeFetchSize() {
        this.fetchSize = 0;
    }
    
    public int getResultSetScrollType() {
        return this.resultSetScrollType;
    }
    
    public String getSql() {
        return this.sql;
    }
    
    public ParameterHolder[] getParameters() {
        return this.parameters;
    }
    
    public ResultSet getGeneratedKeys(final Protocol protocol) throws SQLException {
        if (this.autoGeneratedKeys != 1) {
            throw new SQLException("Cannot return generated keys : query was not set with Statement.RETURN_GENERATED_KEYS");
        }
        if (this.cmdInformation == null) {
            return JDBC4ResultSet.createEmptyResultSet();
        }
        if (this.batch) {
            return this.cmdInformation.getBatchGeneratedKeys(protocol);
        }
        return this.cmdInformation.getGeneratedKeys(protocol, this.sql);
    }
    
    public void close() throws SQLException {
        if (this.statement != null) {
            this.statement.realClose();
        }
        this.statement = null;
        this.fetchSize = 0;
    }
    
    public int getMaxFieldSize() {
        return this.maxFieldSize;
    }
    
    public void setAutoIncrement(final int autoIncrement) {
        this.autoIncrement = autoIncrement;
    }
    
    public int getResultSetConcurrency() {
        return this.resultSetConcurrency;
    }
    
    public int getAutoGeneratedKeys() {
        return this.autoGeneratedKeys;
    }
    
    public boolean isRewritten() {
        return this.rewritten;
    }
    
    public void setRewritten(final boolean rewritten) {
        this.rewritten = rewritten;
    }
    
    public void setStatementId(final int statementId) {
        this.statementId = statementId;
    }
    
    public int getStatementId() {
        return this.statementId;
    }
    
    public void setParameters(final ParameterHolder[] parameters) {
        this.parameters = parameters;
    }
    
    public boolean getBatchSucceed() {
        return this.batchSucceed;
    }
    
    public void setBatchSucceed(final boolean succeed) {
        this.batchSucceed = succeed;
    }
}
