// 
// Decompiled by Procyon v0.5.36
// 

package com.oceanbase.jdbc;

import java.time.format.DateTimeFormatterBuilder;
import com.oceanbase.jdbc.internal.com.send.parameters.OBStructParameter;
import com.oceanbase.jdbc.internal.com.send.parameters.OBINTERVALYMParameter;
import com.oceanbase.jdbc.extend.datatype.INTERVALYM;
import com.oceanbase.jdbc.internal.com.send.parameters.OBINTERVALDSParameter;
import com.oceanbase.jdbc.extend.datatype.INTERVALDS;
import com.oceanbase.jdbc.internal.com.send.parameters.OBBINARY_DOUBLEParameter;
import com.oceanbase.jdbc.internal.com.send.parameters.OBBINARY_FLOATParameter;
import com.oceanbase.jdbc.internal.com.send.parameters.OBNUMBER_FLOATParameter;
import com.oceanbase.jdbc.internal.com.send.parameters.OBNUMBERParameter;
import com.oceanbase.jdbc.internal.com.send.parameters.BigDecimalParameter;
import com.oceanbase.jdbc.internal.com.send.parameters.DoubleParameter;
import com.oceanbase.jdbc.internal.com.send.parameters.FloatParameter;
import com.oceanbase.jdbc.internal.com.send.parameters.LongParameter;
import com.oceanbase.jdbc.internal.com.send.parameters.IntParameter;
import com.oceanbase.jdbc.internal.com.send.parameters.ByteArrayParameter;
import com.oceanbase.jdbc.internal.com.send.parameters.OBByteArrayParameter;
import com.oceanbase.jdbc.internal.com.send.parameters.OBStringParameter;
import com.oceanbase.jdbc.internal.com.send.parameters.ShortParameter;
import com.oceanbase.jdbc.internal.com.send.parameters.ByteParameter;
import com.oceanbase.jdbc.internal.com.send.parameters.BooleanParameter;
import java.sql.SQLType;
import com.oceanbase.jdbc.internal.com.send.parameters.SerializableParameter;
import com.oceanbase.jdbc.internal.com.send.parameters.OBSerializableParameter;
import java.sql.Struct;
import com.oceanbase.jdbc.internal.com.send.parameters.LocalTimeParameter;
import java.time.LocalTime;
import com.oceanbase.jdbc.internal.com.send.parameters.OffsetTimeParameter;
import java.time.OffsetTime;
import com.oceanbase.jdbc.internal.com.send.parameters.ZonedDateTimeParameter;
import java.time.OffsetDateTime;
import java.time.LocalDate;
import java.time.Instant;
import java.math.BigInteger;
import java.math.BigDecimal;
import java.time.ZonedDateTime;
import java.sql.SQLXML;
import java.sql.NClob;
import com.oceanbase.jdbc.internal.com.send.parameters.OBNStringParameter;
import java.sql.RowId;
import java.sql.ParameterMetaData;
import com.oceanbase.jdbc.internal.com.send.parameters.StringParameter;
import java.net.URL;
import com.oceanbase.jdbc.internal.com.send.parameters.NullParameter;
import java.sql.Connection;
import com.oceanbase.jdbc.internal.com.send.parameters.OBTIMESTAMPLTZParameter;
import com.oceanbase.jdbc.extend.datatype.TIMESTAMPLTZ;
import com.oceanbase.jdbc.internal.com.send.parameters.OBTIMESTAMPTZParameter;
import com.oceanbase.jdbc.extend.datatype.TIMESTAMPTZ;
import java.time.LocalDateTime;
import com.oceanbase.jdbc.internal.com.send.parameters.TimestampParameter;
import com.oceanbase.jdbc.internal.com.send.parameters.TimeParameter;
import java.sql.Time;
import com.oceanbase.jdbc.internal.com.send.parameters.OBTIMESTAMPParameter;
import java.sql.Timestamp;
import com.oceanbase.jdbc.internal.com.send.parameters.DateParameter;
import java.util.TimeZone;
import java.util.Calendar;
import java.sql.Date;
import com.oceanbase.jdbc.internal.com.send.parameters.OBArrayParameter;
import java.sql.Array;
import java.sql.Clob;
import java.io.InputStream;
import com.oceanbase.jdbc.internal.com.send.parameters.StreamParameter;
import com.oceanbase.jdbc.internal.com.send.parameters.OBStreamParameter;
import com.oceanbase.jdbc.internal.com.send.parameters.OBEmptyLobParameter;
import java.sql.Blob;
import java.sql.Ref;
import com.oceanbase.jdbc.internal.com.send.parameters.ReaderParameter;
import com.oceanbase.jdbc.internal.com.send.parameters.ParameterHolder;
import com.oceanbase.jdbc.internal.com.send.parameters.OBReaderParameter;
import com.oceanbase.jdbc.internal.ColumnType;
import java.io.Reader;
import java.sql.SQLException;
import com.oceanbase.jdbc.internal.util.exceptions.ExceptionFactory;
import java.util.Map;
import java.time.format.DateTimeFormatter;

public abstract class BasePrepareStatement extends OceanBaseStatement implements ObPrepareStatement
{
    public static final DateTimeFormatter SPEC_ISO_ZONED_DATE_TIME;
    protected int autoGeneratedKeys;
    protected boolean hasLongData;
    private boolean useFractionalSeconds;
    private boolean noBackslashEscapes;
    protected Map<String, Integer> indexMap;
    
    public BasePrepareStatement(final OceanBaseConnection connection, final int resultSetScrollType, final int resultSetConcurrency, final int autoGeneratedKeys, final ExceptionFactory exceptionFactory) {
        super(connection, resultSetScrollType, resultSetConcurrency, exceptionFactory);
        this.hasLongData = false;
        this.noBackslashEscapes = this.protocol.noBackslashEscapes();
        this.useFractionalSeconds = this.options.useFractionalSeconds;
        this.autoGeneratedKeys = autoGeneratedKeys;
    }
    
    @Override
    public BasePrepareStatement clone(final OceanBaseConnection connection) throws CloneNotSupportedException {
        final BasePrepareStatement base = (BasePrepareStatement)super.clone(connection);
        base.useFractionalSeconds = this.options.useFractionalSeconds;
        return base;
    }
    
    @Override
    public long executeLargeUpdate() throws SQLException {
        if (this.executeInternal(this.getFetchSize())) {
            return 0L;
        }
        return this.getLargeUpdateCount();
    }
    
    protected abstract boolean executeInternal(final int p0) throws SQLException;
    
    public void setIndexMap(final Map<String, Integer> indexMap) {
        this.indexMap = indexMap;
    }
    
    @Override
    public void setCharacterStream(final int parameterIndex, final Reader reader, final int length) throws SQLException {
        if (reader == null) {
            this.setNull(parameterIndex, ColumnType.BLOB);
            return;
        }
        if (this.connection.getProtocol().isOracleMode()) {
            this.setParameter(parameterIndex, new OBReaderParameter(reader, length, this.noBackslashEscapes));
        }
        else {
            this.setParameter(parameterIndex, new ReaderParameter(reader, length, this.noBackslashEscapes));
        }
        this.hasLongData = true;
    }
    
    @Override
    public void setCharacterStream(final int parameterIndex, final Reader reader, final long length) throws SQLException {
        if (reader == null) {
            this.setNull(parameterIndex, ColumnType.BLOB);
            return;
        }
        if (this.connection.getProtocol().isOracleMode()) {
            this.setParameter(parameterIndex, new OBReaderParameter(reader, length, this.noBackslashEscapes));
        }
        else {
            this.setParameter(parameterIndex, new ReaderParameter(reader, length, this.noBackslashEscapes));
        }
        this.hasLongData = true;
    }
    
    @Override
    public void setCharacterStream(final int parameterIndex, final Reader reader) throws SQLException {
        if (reader == null) {
            this.setNull(parameterIndex, ColumnType.BLOB);
            return;
        }
        if (this.connection.getProtocol().isOracleMode()) {
            this.setParameter(parameterIndex, new OBReaderParameter(reader, this.noBackslashEscapes));
        }
        else {
            this.setParameter(parameterIndex, new ReaderParameter(reader, this.noBackslashEscapes));
        }
        this.hasLongData = true;
    }
    
    @Override
    public void setRef(final int parameterIndex, final Ref ref) throws SQLException {
        throw this.exceptionFactory.notSupported("REF parameter are not supported");
    }
    
    @Override
    public void setBlob(final int parameterIndex, final Blob blob) throws SQLException {
        if (blob == null) {
            this.setNull(parameterIndex, 2004);
            return;
        }
        if (!(blob instanceof com.oceanbase.jdbc.Blob)) {
            throw this.exceptionFactory.notSupported(blob.getClass().getName() + " is not supported");
        }
        if (((com.oceanbase.jdbc.Blob)blob).isEmptyLob() && !this.options.useServerPrepStmts && ((com.oceanbase.jdbc.Blob)blob).getLocator() != null) {
            this.setParameter(parameterIndex, new OBEmptyLobParameter(0));
            return;
        }
        if (this.connection.getProtocol().isOracleMode()) {
            if (((com.oceanbase.jdbc.Blob)blob).getLocator() != null) {
                if (this.connection.getProtocol().getOptions().useServerPrepStmts) {
                    this.setLobLocator(parameterIndex, blob);
                }
                else {
                    this.setParameter(parameterIndex, new OBStreamParameter(true, blob.getBinaryStream(), blob.length(), this.noBackslashEscapes));
                }
            }
            else {
                this.setParameter(parameterIndex, new OBStreamParameter(false, blob.getBinaryStream(), blob.length(), this.noBackslashEscapes));
            }
        }
        else {
            this.setParameter(parameterIndex, new StreamParameter(blob.getBinaryStream(), blob.length(), this.noBackslashEscapes));
        }
        this.hasLongData = true;
    }
    
    public void setLobLocator(final int parameterIndex, final Blob blob) throws SQLException {
        if (blob == null) {
            this.setNull(parameterIndex, 2004);
            return;
        }
        if (this.connection.getProtocol().isOracleMode()) {
            final byte[] data = ((com.oceanbase.jdbc.Blob)blob).getLocator().binaryData;
            this.setParameter(parameterIndex, new OBStreamParameter(true, data, blob.length(), this.noBackslashEscapes));
        }
        this.hasLongData = true;
    }
    
    @Override
    public void setBlob(final int parameterIndex, final InputStream inputStream, final long length) throws SQLException {
        if (inputStream == null) {
            this.setNull(parameterIndex, ColumnType.BLOB);
            return;
        }
        if (this.connection.getProtocol().isOracleMode()) {
            this.setParameter(parameterIndex, new OBStreamParameter(false, inputStream, length, this.noBackslashEscapes));
        }
        else {
            this.setParameter(parameterIndex, new StreamParameter(inputStream, length, this.noBackslashEscapes));
        }
        this.hasLongData = true;
    }
    
    @Override
    public void setBlob(final int parameterIndex, final InputStream inputStream) throws SQLException {
        if (inputStream == null) {
            this.setNull(parameterIndex, ColumnType.BLOB);
            return;
        }
        if (this.connection.getProtocol().isOracleMode()) {
            this.setParameter(parameterIndex, new OBStreamParameter(inputStream, this.noBackslashEscapes));
        }
        else {
            this.setParameter(parameterIndex, new StreamParameter(inputStream, this.noBackslashEscapes));
        }
        this.hasLongData = true;
    }
    
    @Override
    public void setClob(final int parameterIndex, final Clob clob) throws SQLException {
        if (clob == null) {
            this.setNull(parameterIndex, ColumnType.BLOB);
            return;
        }
        if (!(clob instanceof com.oceanbase.jdbc.Clob)) {
            throw this.exceptionFactory.notSupported(clob.getClass().getName() + " is not supported");
        }
        if (((com.oceanbase.jdbc.Clob)clob).isEmptyLob() && !this.options.useServerPrepStmts) {
            this.setParameter(parameterIndex, new OBEmptyLobParameter(1));
            return;
        }
        if (this.connection.getProtocol().isOracleMode()) {
            if (((com.oceanbase.jdbc.Clob)clob).getLocator() != null && this.connection.getProtocol().getOptions().useServerPsStmtChecksum) {
                final byte[] data = ((com.oceanbase.jdbc.Clob)clob).getLocator().binaryData;
                this.setParameter(parameterIndex, new OBReaderParameter(true, data, clob.length(), this.noBackslashEscapes));
            }
            else {
                this.setParameter(parameterIndex, new OBReaderParameter(clob.getCharacterStream(), clob.length(), this.noBackslashEscapes));
            }
        }
        else {
            this.setParameter(parameterIndex, new ReaderParameter(clob.getCharacterStream(), clob.length(), this.noBackslashEscapes));
        }
        this.hasLongData = true;
    }
    
    @Override
    public void setClob(final int parameterIndex, final Reader reader, final long length) throws SQLException {
        this.setCharacterStream(parameterIndex, reader, length);
    }
    
    @Override
    public void setClob(final int parameterIndex, final Reader reader) throws SQLException {
        this.setCharacterStream(parameterIndex, reader);
    }
    
    @Override
    public void setArray(final int parameterIndex, final Array array) throws SQLException {
        if (array == null) {
            this.setNull(parameterIndex, ColumnType.NULL);
            return;
        }
        this.setParameter(parameterIndex, new OBArrayParameter((ObArray)array, this.protocol.getOptions()));
    }
    
    @Override
    public void setDate(final int parameterIndex, final Date date, final Calendar cal) throws SQLException {
        if (date == null) {
            this.setNull(parameterIndex, 91);
            return;
        }
        this.setParameter(parameterIndex, new DateParameter(date, (cal != null) ? cal.getTimeZone() : TimeZone.getDefault(), this.protocol.getOptions()));
    }
    
    @Override
    public void setDate(final int parameterIndex, final Date date) throws SQLException {
        if (date == null) {
            this.setNull(parameterIndex, 91);
            return;
        }
        if (this.connection.getProtocol().isOracleMode()) {
            final Timestamp timestamp = new Timestamp(date.getTime());
            if (timestamp == null) {
                this.setNull(parameterIndex, ColumnType.TIMESTAMP_NANO);
                return;
            }
            this.setParameter(parameterIndex, new OBTIMESTAMPParameter(timestamp, this.protocol.getTimeZone(), this.useFractionalSeconds, true));
        }
        else {
            this.setParameter(parameterIndex, new DateParameter(date, TimeZone.getDefault(), this.protocol.getOptions()));
        }
    }
    
    @Override
    public void setTime(final int parameterIndex, final Time time, final Calendar cal) throws SQLException {
        if (time == null) {
            this.setNull(parameterIndex, ColumnType.TIME);
            return;
        }
        if (this.protocol.isOracleMode()) {
            final Timestamp ts = new Timestamp(time.getTime());
            final TimeZone tz = this.protocol.getTimeZone();
            this.setParameter(parameterIndex, new OBTIMESTAMPParameter(ts, tz, this.useFractionalSeconds));
        }
        else {
            this.setParameter(parameterIndex, new TimeParameter(time, TimeZone.getDefault(), this.useFractionalSeconds));
        }
    }
    
    @Override
    public void setTime(final int parameterIndex, final Time time) throws SQLException {
        if (time == null) {
            this.setNull(parameterIndex, ColumnType.TIME);
            return;
        }
        if (this.protocol.isOracleMode()) {
            final Timestamp ts = new Timestamp(time.getTime());
            final TimeZone tz = this.protocol.getTimeZone();
            this.setParameter(parameterIndex, new OBTIMESTAMPParameter(ts, tz, this.useFractionalSeconds));
        }
        else {
            this.setParameter(parameterIndex, new TimeParameter(time, TimeZone.getDefault(), this.useFractionalSeconds));
        }
    }
    
    @Override
    public void setTimestamp(final int parameterIndex, final Timestamp timestamp, final Calendar cal) throws SQLException {
        if (timestamp == null) {
            this.setNull(parameterIndex, ColumnType.DATETIME);
            return;
        }
        final TimeZone tz = (cal != null) ? cal.getTimeZone() : this.protocol.getTimeZone();
        this.setParameter(parameterIndex, new TimestampParameter(timestamp, tz, this.useFractionalSeconds));
    }
    
    @Override
    public void setTimestamp(final int parameterIndex, final Timestamp timestamp) throws SQLException {
        if (this.connection.getProtocol().isOracleMode()) {
            this.setTIMESTAMP(parameterIndex, timestamp);
        }
        else {
            if (timestamp == null) {
                this.setNull(parameterIndex, ColumnType.DATETIME);
                return;
            }
            this.setParameter(parameterIndex, new TimestampParameter(timestamp, this.protocol.getTimeZone(), this.useFractionalSeconds));
        }
    }
    
    public void setLocalDateTime(final int parameterIndex, final LocalDateTime localDateTime) throws SQLException {
        if (this.connection.getProtocol().isOracleMode()) {
            if (localDateTime == null) {
                this.setNull(parameterIndex, ColumnType.TIMESTAMP_NANO);
                return;
            }
            this.setParameter(parameterIndex, new OBTIMESTAMPParameter(Timestamp.valueOf(localDateTime), TimeZone.getDefault(), this.useFractionalSeconds));
        }
    }
    
    @Override
    public void setTIMESTAMP(final int parameterIndex, final Timestamp timestamp) throws SQLException {
        if (timestamp == null) {
            this.setNull(parameterIndex, ColumnType.TIMESTAMP_NANO);
            return;
        }
        this.setParameter(parameterIndex, new OBTIMESTAMPParameter(timestamp, this.protocol.getTimeZone(), this.useFractionalSeconds));
    }
    
    @Override
    public void setTIMESTAMPTZ(final int parameterIndex, final TIMESTAMPTZ timestamp) throws SQLException {
        if (timestamp == null) {
            this.setNull(parameterIndex, ColumnType.TIMESTAMP_TZ);
            return;
        }
        this.setParameter(parameterIndex, new OBTIMESTAMPTZParameter(timestamp, this.protocol.isTZTablesImported()));
    }
    
    @Override
    public void setTIMESTAMPLTZ(final int parameterIndex, final TIMESTAMPLTZ timestamp) throws SQLException {
        if (timestamp == null) {
            this.setNull(parameterIndex, ColumnType.TIMESTAMP_LTZ);
            return;
        }
        this.setParameter(parameterIndex, new OBTIMESTAMPLTZParameter(timestamp, this.connection));
    }
    
    @Override
    public void setNull(final int parameterIndex, final int sqlType) throws SQLException {
        this.setParameter(parameterIndex, new NullParameter());
    }
    
    public void setNull(final int parameterIndex, final ColumnType mariadbType) throws SQLException {
        this.setParameter(parameterIndex, new NullParameter(mariadbType));
    }
    
    @Override
    public void setNull(final int parameterIndex, final int sqlType, final String typeName) throws SQLException {
        this.setParameter(parameterIndex, new NullParameter());
    }
    
    public abstract void setParameter(final int p0, final ParameterHolder p1) throws SQLException;
    
    @Override
    public void setURL(final int parameterIndex, final URL url) throws SQLException {
        if (url == null) {
            this.setNull(parameterIndex, ColumnType.STRING);
            return;
        }
        this.setParameter(parameterIndex, new StringParameter(url.toString(), this.noBackslashEscapes, this.connection.getProtocol().getOptions().characterEncoding));
    }
    
    @Override
    public abstract ParameterMetaData getParameterMetaData() throws SQLException;
    
    @Override
    public void setRowId(final int parameterIndex, final RowId rowid) throws SQLException {
        if (!this.connection.getProtocol().isOracleMode()) {
            throw this.exceptionFactory.notSupported("RowIDs not supported");
        }
        if (rowid == null) {
            this.setNull(parameterIndex, ColumnType.ROWID);
            return;
        }
        this.setParameter(parameterIndex, new StringParameter(rowid.toString(), this.noBackslashEscapes, this.connection.getProtocol().getOptions().characterEncoding));
    }
    
    @Override
    public void setNString(final int parameterIndex, final String value) throws SQLException {
        if (value == null) {
            this.setNull(parameterIndex, ColumnType.VARCHAR);
            return;
        }
        if (this.connection.getProtocol().isOracleMode()) {
            this.setParameter(parameterIndex, new OBNStringParameter(value, this.noBackslashEscapes, this.connection.getProtocol().getOptions().characterEncoding));
        }
        else {
            this.setParameter(parameterIndex, new StringParameter(value, this.noBackslashEscapes, this.connection.getProtocol().getOptions().characterEncoding));
        }
    }
    
    @Override
    public void setNCharacterStream(final int parameterIndex, final Reader value, final long length) throws SQLException {
        this.setCharacterStream(parameterIndex, value, length);
    }
    
    @Override
    public void setNCharacterStream(final int parameterIndex, final Reader value) throws SQLException {
        this.setCharacterStream(parameterIndex, value);
    }
    
    @Override
    public void setNClob(final int parameterIndex, final NClob value) throws SQLException {
        this.setClob(parameterIndex, value);
    }
    
    @Override
    public void setNClob(final int parameterIndex, final Reader reader, final long length) throws SQLException {
        this.setClob(parameterIndex, reader, length);
    }
    
    @Override
    public void setNClob(final int parameterIndex, final Reader reader) throws SQLException {
        this.setClob(parameterIndex, reader);
    }
    
    @Override
    public void setSQLXML(final int parameterIndex, final SQLXML xmlObject) throws SQLException {
        throw this.exceptionFactory.notSupported("SQlXML not supported");
    }
    
    @Override
    public void setObject(final int parameterIndex, final Object obj, final int targetSqlType, final int scaleOrLength) throws SQLException {
        this.setInternalObject(parameterIndex, obj, targetSqlType, scaleOrLength);
    }
    
    @Override
    public void setObject(final int parameterIndex, final Object obj, final int targetSqlType) throws SQLException {
        this.setInternalObject(parameterIndex, obj, targetSqlType, Long.MAX_VALUE);
    }
    
    private Timestamp getTimeStamp(final ZonedDateTime obj) {
        final StringBuilder stringBuilder = new StringBuilder();
        String nanoString = Integer.toString(obj.getNano());
        if (nanoString.length() < 9) {
            final StringBuilder sb = new StringBuilder();
            for (int x = 9 - nanoString.length(), i = 0; i < x; ++i) {
                sb.append("0");
            }
            nanoString = sb.toString() + nanoString;
        }
        return Timestamp.valueOf(stringBuilder.append(obj.getYear()).append("-").append(obj.getMonthValue()).append("-").append(obj.getDayOfMonth()).append(" ").append(obj.getHour()).append(":").append(obj.getMinute()).append(":").append(obj.getSecond()).append(".").append(nanoString).toString());
    }
    
    @Override
    public void setObject(final int parameterIndex, final Object obj) throws SQLException {
        if (obj == null) {
            this.setNull(parameterIndex, 4);
        }
        else if (obj instanceof String) {
            this.setString(parameterIndex, (String)obj);
        }
        else if (obj instanceof Integer) {
            this.setInt(parameterIndex, (int)obj);
        }
        else if (obj instanceof Long) {
            this.setLong(parameterIndex, (long)obj);
        }
        else if (obj instanceof Short) {
            this.setShort(parameterIndex, (short)obj);
        }
        else if (obj instanceof Double) {
            this.setDouble(parameterIndex, (double)obj);
        }
        else if (obj instanceof Float) {
            this.setFloat(parameterIndex, (float)obj);
        }
        else if (obj instanceof Byte) {
            this.setByte(parameterIndex, (byte)obj);
        }
        else if (obj instanceof byte[]) {
            this.setBytes(parameterIndex, (byte[])obj);
        }
        else if (obj instanceof Date) {
            this.setDate(parameterIndex, (Date)obj);
        }
        else if (obj instanceof Time) {
            this.setTime(parameterIndex, (Time)obj);
        }
        else if (obj instanceof Timestamp) {
            this.setTimestamp(parameterIndex, (Timestamp)obj);
        }
        else if (obj instanceof java.util.Date) {
            this.setTimestamp(parameterIndex, new Timestamp(((java.util.Date)obj).getTime()));
        }
        else if (obj instanceof Boolean) {
            this.setBoolean(parameterIndex, (boolean)obj);
        }
        else if (obj instanceof Blob) {
            this.setBlob(parameterIndex, (Blob)obj);
        }
        else if (obj instanceof InputStream) {
            this.setBinaryStream(parameterIndex, (InputStream)obj);
        }
        else if (obj instanceof Reader) {
            this.setCharacterStream(parameterIndex, (Reader)obj);
        }
        else if (obj instanceof BigDecimal) {
            this.setBigDecimal(parameterIndex, (BigDecimal)obj);
        }
        else if (obj instanceof BigInteger) {
            this.setString(parameterIndex, obj.toString());
        }
        else if (obj instanceof Clob) {
            this.setClob(parameterIndex, (Clob)obj);
        }
        else if (obj instanceof LocalDateTime) {
            this.setLocalDateTime(parameterIndex, (LocalDateTime)obj);
        }
        else if (obj instanceof Instant) {
            this.setTimestamp(parameterIndex, Timestamp.from((Instant)obj));
        }
        else if (obj instanceof LocalDate) {
            this.setDate(parameterIndex, Date.valueOf((LocalDate)obj));
        }
        else if (obj instanceof OffsetDateTime) {
            this.setParameter(parameterIndex, new ZonedDateTimeParameter(((OffsetDateTime)obj).toZonedDateTime(), this.protocol.getTimeZone().toZoneId(), this.useFractionalSeconds, this.options));
        }
        else if (obj instanceof OffsetTime) {
            this.setParameter(parameterIndex, new OffsetTimeParameter((OffsetTime)obj, this.protocol.getTimeZone().toZoneId(), this.useFractionalSeconds, this.options));
        }
        else if (obj instanceof ZonedDateTime) {
            final String zoneId = ((ZonedDateTime)obj).getZone().getId();
            TimeZone tz;
            if (zoneId == null || zoneId.isEmpty()) {
                tz = TimeZone.getDefault();
            }
            else if (zoneId.charAt(0) == '+' || zoneId.charAt(0) == '-') {
                tz = TimeZone.getTimeZone("GMT" + zoneId);
            }
            else {
                tz = TimeZone.getTimeZone(zoneId);
            }
            final TIMESTAMPTZ timestamptz = new TIMESTAMPTZ(this.connection, this.getTimeStamp((ZonedDateTime)obj), Calendar.getInstance(tz), this.protocol.isTZTablesImported());
            this.setTIMESTAMPTZ(parameterIndex, timestamptz);
        }
        else if (obj instanceof LocalTime) {
            this.setParameter(parameterIndex, new LocalTimeParameter((LocalTime)obj, this.useFractionalSeconds));
        }
        else if (obj instanceof Array) {
            this.setArray(parameterIndex, (Array)obj);
        }
        else if (obj instanceof Struct) {
            this.setStruct(parameterIndex, (Struct)obj);
        }
        else if (obj instanceof RowId) {
            this.setRowId(parameterIndex, (RowId)obj);
        }
        else {
            if (this.connection.getProtocol().isOracleMode()) {
                this.setParameter(parameterIndex, new OBSerializableParameter(obj, this.noBackslashEscapes));
            }
            else {
                this.setParameter(parameterIndex, new SerializableParameter(obj, this.noBackslashEscapes));
            }
            this.hasLongData = true;
        }
    }
    
    @Override
    public void setObject(final int parameterIndex, final Object obj, final SQLType targetSqlType, final int scaleOrLength) throws SQLException {
        this.setObject(parameterIndex, obj, targetSqlType.getVendorTypeNumber(), scaleOrLength);
    }
    
    @Override
    public void setObject(final int parameterIndex, final Object obj, final SQLType targetSqlType) throws SQLException {
        this.setObject(parameterIndex, obj, targetSqlType.getVendorTypeNumber());
    }
    
    private void setInternalObject(final int parameterIndex, final Object obj, final int targetSqlType, final long scaleOrLength) throws SQLException {
        switch (targetSqlType) {
            case -8:
            case 70:
            case 2000:
            case 2002:
            case 2003:
            case 2006:
            case 2009: {
                throw this.exceptionFactory.notSupported("Type not supported");
            }
            default: {
                if (obj == null) {
                    this.setNull(parameterIndex, 4);
                }
                else if (obj instanceof String) {
                    if (targetSqlType == 2004) {
                        throw this.exceptionFactory.create("Cannot convert a String to a Blob");
                    }
                    final String str = (String)obj;
                    try {
                        switch (targetSqlType) {
                            case -7:
                            case 16: {
                                this.setBoolean(parameterIndex, !"false".equalsIgnoreCase(str) && !"0".equals(str));
                                break;
                            }
                            case -6: {
                                this.setByte(parameterIndex, Byte.parseByte(str));
                                break;
                            }
                            case 5: {
                                this.setShort(parameterIndex, Short.parseShort(str));
                                break;
                            }
                            case 4: {
                                this.setInt(parameterIndex, Integer.parseInt(str));
                                break;
                            }
                            case 6:
                            case 8: {
                                this.setDouble(parameterIndex, Double.valueOf(str));
                                break;
                            }
                            case 7: {
                                this.setFloat(parameterIndex, Float.valueOf(str));
                                break;
                            }
                            case -5: {
                                this.setLong(parameterIndex, Long.valueOf(str));
                                break;
                            }
                            case 2:
                            case 3: {
                                this.setBigDecimal(parameterIndex, new BigDecimal(str));
                                break;
                            }
                            case -16:
                            case -15:
                            case -9:
                            case -1:
                            case 1:
                            case 12:
                            case 2005:
                            case 2011: {
                                this.setString(parameterIndex, str);
                                break;
                            }
                            case 93: {
                                if (str.startsWith("0000-00-00")) {
                                    this.setTimestamp(parameterIndex, null);
                                    break;
                                }
                                this.setTimestamp(parameterIndex, Timestamp.valueOf(str));
                                break;
                            }
                            case 92: {
                                this.setTime(parameterIndex, Time.valueOf((String)obj));
                                break;
                            }
                            case 2013: {
                                this.setParameter(parameterIndex, new OffsetTimeParameter(OffsetTime.parse(str), this.protocol.getTimeZone().toZoneId(), this.useFractionalSeconds, this.options));
                                break;
                            }
                            case 2014: {
                                this.setParameter(parameterIndex, new ZonedDateTimeParameter(ZonedDateTime.parse(str, BasePrepareStatement.SPEC_ISO_ZONED_DATE_TIME), this.protocol.getTimeZone().toZoneId(), this.useFractionalSeconds, this.options));
                                break;
                            }
                            default: {
                                throw this.exceptionFactory.create(String.format("Could not convert [%s] to %s", str, targetSqlType));
                            }
                        }
                    }
                    catch (IllegalArgumentException e) {
                        throw this.exceptionFactory.create(String.format("Could not convert [%s] to %s", str, targetSqlType), e);
                    }
                }
                else if (obj instanceof Number) {
                    final Number bd = (Number)obj;
                    switch (targetSqlType) {
                        case -6: {
                            this.setByte(parameterIndex, bd.byteValue());
                            break;
                        }
                        case 5: {
                            this.setShort(parameterIndex, bd.shortValue());
                            break;
                        }
                        case 4: {
                            this.setInt(parameterIndex, bd.intValue());
                            break;
                        }
                        case -5: {
                            this.setLong(parameterIndex, bd.longValue());
                            break;
                        }
                        case 6:
                        case 8: {
                            this.setDouble(parameterIndex, bd.doubleValue());
                            break;
                        }
                        case 7: {
                            this.setFloat(parameterIndex, bd.floatValue());
                            break;
                        }
                        case 2:
                        case 3: {
                            if (obj instanceof BigDecimal) {
                                this.setBigDecimal(parameterIndex, (BigDecimal)obj);
                                break;
                            }
                            if (obj instanceof Double || obj instanceof Float) {
                                this.setDouble(parameterIndex, bd.doubleValue());
                                break;
                            }
                            this.setLong(parameterIndex, bd.longValue());
                            break;
                        }
                        case -7: {
                            this.setBoolean(parameterIndex, bd.shortValue() != 0);
                            break;
                        }
                        case 1:
                        case 12: {
                            this.setString(parameterIndex, bd.toString());
                            break;
                        }
                        default: {
                            throw this.exceptionFactory.create(String.format("Could not convert [%s] to %s", bd, targetSqlType));
                        }
                    }
                }
                else if (obj instanceof byte[]) {
                    if (targetSqlType != -2 && targetSqlType != -3 && targetSqlType != -4) {
                        throw this.exceptionFactory.create("Can only convert a byte[] to BINARY, VARBINARY or LONGVARBINARY");
                    }
                    this.setBytes(parameterIndex, (byte[])obj);
                }
                else if (obj instanceof Time) {
                    this.setTime(parameterIndex, (Time)obj);
                }
                else if (obj instanceof Timestamp) {
                    this.setTimestamp(parameterIndex, (Timestamp)obj);
                }
                else if (obj instanceof Date) {
                    this.setDate(parameterIndex, (Date)obj);
                }
                else if (obj instanceof java.util.Date) {
                    final long timemillis = ((java.util.Date)obj).getTime();
                    if (targetSqlType == 91) {
                        this.setDate(parameterIndex, new Date(timemillis));
                    }
                    else if (targetSqlType == 92) {
                        this.setTime(parameterIndex, new Time(timemillis));
                    }
                    else if (targetSqlType == 93) {
                        this.setTimestamp(parameterIndex, new Timestamp(timemillis));
                    }
                }
                else if (obj instanceof Boolean) {
                    this.setBoolean(parameterIndex, (boolean)obj);
                }
                else if (obj instanceof Blob) {
                    this.setBlob(parameterIndex, (Blob)obj);
                }
                else if (obj instanceof Clob) {
                    this.setClob(parameterIndex, (Clob)obj);
                }
                else if (obj instanceof InputStream) {
                    this.setBinaryStream(parameterIndex, (InputStream)obj, scaleOrLength);
                }
                else if (obj instanceof Reader) {
                    this.setCharacterStream(parameterIndex, (Reader)obj, scaleOrLength);
                }
                else if (obj instanceof LocalDateTime) {
                    this.setTimestamp(parameterIndex, Timestamp.valueOf((LocalDateTime)obj));
                }
                else if (obj instanceof Instant) {
                    this.setTimestamp(parameterIndex, Timestamp.from((Instant)obj));
                }
                else if (obj instanceof LocalDate) {
                    this.setDate(parameterIndex, Date.valueOf((LocalDate)obj));
                }
                else if (obj instanceof OffsetDateTime) {
                    this.setParameter(parameterIndex, new ZonedDateTimeParameter(((OffsetDateTime)obj).toZonedDateTime(), this.protocol.getTimeZone().toZoneId(), this.useFractionalSeconds, this.options));
                }
                else if (obj instanceof OffsetTime) {
                    this.setParameter(parameterIndex, new OffsetTimeParameter((OffsetTime)obj, this.protocol.getTimeZone().toZoneId(), this.useFractionalSeconds, this.options));
                }
                else if (obj instanceof ZonedDateTime) {
                    final String zoneId = ((ZonedDateTime)obj).getZone().getId();
                    TimeZone tz;
                    if (zoneId == null || zoneId.isEmpty()) {
                        tz = TimeZone.getDefault();
                    }
                    else if (zoneId.charAt(0) == '+' || zoneId.charAt(0) == '-') {
                        tz = TimeZone.getTimeZone("GMT" + zoneId);
                    }
                    else {
                        tz = TimeZone.getTimeZone(zoneId);
                    }
                    this.protocol.isTZTablesImported();
                    final TIMESTAMPTZ timestamptz = new TIMESTAMPTZ(this.connection, this.getTimeStamp((ZonedDateTime)obj), Calendar.getInstance(tz), this.protocol.isTZTablesImported());
                    this.setTIMESTAMPTZ(parameterIndex, timestamptz);
                }
                else {
                    if (!(obj instanceof LocalTime)) {
                        throw this.exceptionFactory.create(String.format("Could not set parameter in setObject, could not convert: %s to %s", obj.getClass(), targetSqlType));
                    }
                    this.setParameter(parameterIndex, new LocalTimeParameter((LocalTime)obj, this.useFractionalSeconds));
                }
            }
        }
    }
    
    @Override
    public void setAsciiStream(final int parameterIndex, final InputStream stream, final long length) throws SQLException {
        if (stream == null) {
            this.setNull(parameterIndex, ColumnType.BLOB);
            return;
        }
        if (this.protocol.isOracleMode()) {
            this.setParameter(parameterIndex, new OBStreamParameter(stream, length, this.noBackslashEscapes));
        }
        else {
            this.setParameter(parameterIndex, new StreamParameter(stream, length, this.noBackslashEscapes));
        }
        this.hasLongData = true;
    }
    
    @Override
    public void setAsciiStream(final int parameterIndex, final InputStream stream) throws SQLException {
        if (stream == null) {
            this.setNull(parameterIndex, ColumnType.BLOB);
            return;
        }
        if (this.protocol.isOracleMode()) {
            this.setParameter(parameterIndex, new OBStreamParameter(stream, this.noBackslashEscapes));
        }
        else {
            this.setParameter(parameterIndex, new StreamParameter(stream, this.noBackslashEscapes));
        }
        this.hasLongData = true;
    }
    
    @Override
    public void setAsciiStream(final int parameterIndex, final InputStream stream, final int length) throws SQLException {
        if (stream == null) {
            this.setNull(parameterIndex, ColumnType.BLOB);
            return;
        }
        if (this.protocol.isOracleMode()) {
            this.setParameter(parameterIndex, new OBStreamParameter(stream, length, this.noBackslashEscapes));
        }
        else {
            this.setParameter(parameterIndex, new StreamParameter(stream, length, this.noBackslashEscapes));
        }
        this.hasLongData = true;
    }
    
    @Override
    public void setBinaryStream(final int parameterIndex, final InputStream stream, final long length) throws SQLException {
        if (stream == null) {
            this.setNull(parameterIndex, ColumnType.BLOB);
            return;
        }
        if (this.protocol.isOracleMode()) {
            this.setParameter(parameterIndex, new OBStreamParameter(stream, length, this.noBackslashEscapes));
        }
        else {
            this.setParameter(parameterIndex, new StreamParameter(stream, length, this.noBackslashEscapes));
        }
        this.hasLongData = true;
    }
    
    @Override
    public void setBinaryStream(final int parameterIndex, final InputStream stream) throws SQLException {
        if (stream == null) {
            this.setNull(parameterIndex, ColumnType.BLOB);
            return;
        }
        if (this.connection.getProtocol().isOracleMode()) {
            this.setParameter(parameterIndex, new OBStreamParameter(stream, this.noBackslashEscapes));
        }
        else {
            this.setParameter(parameterIndex, new StreamParameter(stream, this.noBackslashEscapes));
        }
        this.hasLongData = true;
    }
    
    @Override
    public void setBinaryStream(final int parameterIndex, final InputStream stream, final int length) throws SQLException {
        if (stream == null) {
            this.setNull(parameterIndex, ColumnType.BLOB);
            return;
        }
        if (this.protocol.isOracleMode()) {
            this.setParameter(parameterIndex, new OBStreamParameter(stream, length, this.noBackslashEscapes));
        }
        else {
            this.setParameter(parameterIndex, new StreamParameter(stream, length, this.noBackslashEscapes));
        }
        this.hasLongData = true;
    }
    
    @Override
    public void setBoolean(final int parameterIndex, final boolean value) throws SQLException {
        this.setParameter(parameterIndex, new BooleanParameter(value));
    }
    
    @Override
    public void setByte(final int parameterIndex, final byte bit) throws SQLException {
        this.setParameter(parameterIndex, new ByteParameter(bit));
    }
    
    @Override
    public void setShort(final int parameterIndex, final short value) throws SQLException {
        this.setParameter(parameterIndex, new ShortParameter(value));
    }
    
    @Override
    public void setString(final int parameterIndex, final String str) throws SQLException {
        if (str == null) {
            this.setNull(parameterIndex, ColumnType.VARCHAR);
            return;
        }
        if (this.connection.getProtocol().isOracleMode()) {
            this.setParameter(parameterIndex, new OBStringParameter(str, this.noBackslashEscapes, this.connection.getProtocol().getOptions().characterEncoding));
        }
        else {
            this.setParameter(parameterIndex, new StringParameter(str, this.noBackslashEscapes, this.connection.getProtocol().getOptions().characterEncoding));
        }
    }
    
    @Override
    public void setBytes(final int parameterIndex, final byte[] bytes) throws SQLException {
        if (bytes == null) {
            this.setNull(parameterIndex, ColumnType.BLOB);
            return;
        }
        if (this.connection.getProtocol().isOracleMode()) {
            this.setParameter(parameterIndex, new OBByteArrayParameter(bytes, this.noBackslashEscapes));
        }
        else {
            this.setParameter(parameterIndex, new ByteArrayParameter(bytes, this.noBackslashEscapes));
        }
    }
    
    @Override
    @Deprecated
    public void setUnicodeStream(final int parameterIndex, final InputStream x, final int length) throws SQLException {
        if (x == null) {
            this.setNull(parameterIndex, 2004);
            return;
        }
        if (this.protocol.isOracleMode()) {
            this.setParameter(parameterIndex, new OBStreamParameter(x, length, this.noBackslashEscapes));
        }
        else {
            this.setParameter(parameterIndex, new StreamParameter(x, length, this.noBackslashEscapes));
        }
        this.hasLongData = true;
    }
    
    @Override
    public void setInt(final int column, final int value) throws SQLException {
        if (this.connection.getProtocol().isOracleMode()) {
            this.setNUMBER(column, value);
            return;
        }
        this.setParameter(column, new IntParameter(value));
    }
    
    @Override
    public void setLong(final int parameterIndex, final long value) throws SQLException {
        this.setParameter(parameterIndex, new LongParameter(value));
    }
    
    @Override
    public void setFloat(final int parameterIndex, final float value) throws SQLException {
        this.setParameter(parameterIndex, new FloatParameter(value));
    }
    
    @Override
    public void setDouble(final int parameterIndex, final double value) throws SQLException {
        this.setParameter(parameterIndex, new DoubleParameter(value));
    }
    
    @Override
    public void setBigDecimal(final int parameterIndex, final BigDecimal bigDecimal) throws SQLException {
        if (bigDecimal == null) {
            this.setNull(parameterIndex, ColumnType.DECIMAL);
            return;
        }
        this.setParameter(parameterIndex, new BigDecimalParameter(bigDecimal));
    }
    
    public void setNUMBER(final int parameterIndex, final Integer number) throws SQLException {
        if (number == null) {
            this.setNull(parameterIndex, ColumnType.NUMBER);
            return;
        }
        this.setParameter(parameterIndex, new OBNUMBERParameter(number));
    }
    
    public void setNUMBER_FLOAT(final int parameterIndex, final Float number) throws SQLException {
        if (number == null) {
            this.setNull(parameterIndex, ColumnType.NUMBER_FLOAT);
            return;
        }
        this.setParameter(parameterIndex, new OBNUMBER_FLOATParameter(number));
    }
    
    public void setBINARY_FLOAT(final int parameterIndex, final Float number) throws SQLException {
        if (number == null) {
            this.setNull(parameterIndex, ColumnType.BINARY_FLOAT);
            return;
        }
        this.setParameter(parameterIndex, new OBBINARY_FLOATParameter(number));
    }
    
    public void setBINARY_DOUBLE(final int parameterIndex, final Double number) throws SQLException {
        if (number == null) {
            this.setNull(parameterIndex, ColumnType.BINARY_DOUBLE);
            return;
        }
        this.setParameter(parameterIndex, new OBBINARY_DOUBLEParameter(number.floatValue()));
    }
    
    @Override
    public void setINTERVALDS(final int parameterIndex, final INTERVALDS intervalds) throws SQLException {
        if (intervalds == null) {
            this.setNull(parameterIndex, ColumnType.INTERVALDS);
            return;
        }
        this.setParameter(parameterIndex, new OBINTERVALDSParameter(intervalds));
    }
    
    @Override
    public void setINTERVALYM(final int parameterIndex, final INTERVALYM intervalym) throws SQLException {
        if (intervalym == null) {
            this.setNull(parameterIndex, ColumnType.INTERVALDS);
            return;
        }
        this.setParameter(parameterIndex, new OBINTERVALYMParameter(intervalym));
    }
    
    public void setStruct(final int parameterIndex, final Struct x) throws SQLException {
        if (x == null) {
            this.setNull(parameterIndex, ColumnType.STRUCT);
            return;
        }
        this.setParameter(parameterIndex, new OBStructParameter((ObStruct)x, this.protocol.getOptions()));
    }
    
    public String asSql() throws SQLException {
        return null;
    }
    
    static {
        SPEC_ISO_ZONED_DATE_TIME = new DateTimeFormatterBuilder().parseCaseInsensitive().append(DateTimeFormatter.ISO_LOCAL_DATE).optionalStart().appendLiteral('T').optionalEnd().optionalStart().appendLiteral(' ').optionalEnd().append(DateTimeFormatter.ISO_LOCAL_TIME).appendOffsetId().optionalStart().appendLiteral('[').parseCaseSensitive().appendZoneRegionId().appendLiteral(']').toFormatter();
    }
}
