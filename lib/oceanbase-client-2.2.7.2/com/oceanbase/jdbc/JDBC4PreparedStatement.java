// 
// Decompiled by Procyon v0.5.36
// 

package com.oceanbase.jdbc;

import com.oceanbase.jdbc.internal.logging.LoggerFactory;
import com.oceanbase.jdbc.internal.io.output.PacketOutputStream;
import java.util.Arrays;
import java.io.IOException;
import java.io.OutputStream;
import com.oceanbase.jdbc.internal.io.output.StandardPacketOutputStream;
import java.io.ByteArrayOutputStream;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.Array;
import java.sql.SQLSyntaxErrorException;
import com.oceanbase.jdbc.internal.com.read.dao.Results;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.SQLException;
import com.oceanbase.jdbc.internal.util.Utils;
import java.util.ArrayList;
import com.oceanbase.jdbc.internal.util.exceptions.ExceptionFactory;
import java.sql.ParameterMetaData;
import java.sql.ResultSetMetaData;
import com.oceanbase.jdbc.internal.util.dao.ClientPrepareResult;
import com.oceanbase.jdbc.internal.com.send.parameters.ParameterHolder;
import java.util.List;
import com.oceanbase.jdbc.internal.logging.Logger;

public class JDBC4PreparedStatement extends BasePrepareStatement
{
    private static final Logger logger;
    private final List<ParameterHolder[]> parameterList;
    private ClientPrepareResult prepareResult;
    protected String sqlQuery;
    private ParameterHolder[] parameters;
    private ResultSetMetaData resultSetMetaData;
    private ParameterMetaData parameterMetaData;
    
    public JDBC4PreparedStatement(final OceanBaseConnection connection, final String sql, final int resultSetScrollType, final int resultSetConcurrency, final int autoGeneratedKeys, final ExceptionFactory exceptionFactory) throws SQLException {
        super(connection, resultSetScrollType, resultSetConcurrency, autoGeneratedKeys, exceptionFactory);
        this.parameterList = new ArrayList<ParameterHolder[]>();
        this.resultSetMetaData = null;
        this.parameterMetaData = null;
        this.sqlQuery = sql;
        if (this.options.rewriteBatchedStatements) {
            String sqlString = sql;
            if (!this.options.useServerPrepStmts && this.protocol.isOracleMode() && this.options.supportNameBinding) {
                sqlString = Utils.trimSQLString(sqlString, this.protocol.noBackslashEscapes(), this.protocol.isOracleMode(), true);
            }
            this.prepareResult = ClientPrepareResult.rewritableParts(sqlString, this.protocol.noBackslashEscapes(), this.protocol.isOracleMode(), this.protocol.getEncoding());
        }
        else {
            this.prepareResult = ClientPrepareResult.parameterParts(this.sqlQuery, this.protocol.noBackslashEscapes(), this.protocol.isOracleMode(), this.protocol.getEncoding());
        }
        this.parameters = new ParameterHolder[this.prepareResult.getParamCount()];
    }
    
    @Override
    public JDBC4PreparedStatement clone(final OceanBaseConnection connection) throws CloneNotSupportedException {
        final JDBC4PreparedStatement clone = (JDBC4PreparedStatement)super.clone(connection);
        clone.sqlQuery = this.sqlQuery;
        clone.prepareResult = this.prepareResult;
        clone.parameters = new ParameterHolder[this.prepareResult.getParamCount()];
        clone.resultSetMetaData = this.resultSetMetaData;
        clone.parameterMetaData = this.parameterMetaData;
        return clone;
    }
    
    @Override
    public boolean execute() throws SQLException {
        return this.executeInternal(this.getFetchSize());
    }
    
    @Override
    public ResultSet executeQuery() throws SQLException {
        if (this.execute()) {
            return this.results.getResultSet();
        }
        return JDBC4ResultSet.createEmptyResultSet();
    }
    
    @Override
    public int executeUpdate() throws SQLException {
        if (this.execute()) {
            return 0;
        }
        return this.getUpdateCount();
    }
    
    @Override
    protected boolean executeInternal(final int fetchSize) throws SQLException {
        for (int i = 0; i < this.prepareResult.getParamCount(); ++i) {
            if (this.parameters[i] == null) {
                JDBC4PreparedStatement.logger.error("Parameter at position {} is not set", (Object)(i + 1));
                throw this.exceptionFactory.raiseStatementError(this.connection, this).create("Parameter at position " + (i + 1) + " is " + "not set", "07004");
            }
        }
        this.lock.lock();
        try {
            this.executeQueryPrologue(false);
            this.results = new Results(this, fetchSize, false, 1, false, this.resultSetScrollType, this.resultSetConcurrency, this.autoGeneratedKeys, this.protocol.getAutoIncrementIncrement(), this.sqlQuery, this.parameters);
            if (this.queryTimeout != 0 && this.canUseServerTimeout) {
                this.protocol.executeQuery(this.protocol.isMasterConnection(), this.results, this.prepareResult, this.parameters, this.queryTimeout);
            }
            else {
                this.protocol.executeQuery(this.protocol.isMasterConnection(), this.results, this.prepareResult, this.parameters);
            }
            this.results.commandEnd();
            return this.results.getResultSet() != null;
        }
        catch (SQLException exception) {
            if (this.results != null) {
                this.results.commandEnd();
            }
            throw this.executeExceptionEpilogue(exception);
        }
        finally {
            this.executeEpilogue();
            this.lock.unlock();
        }
    }
    
    @Override
    public void addBatch() throws SQLException {
        final ParameterHolder[] holder = new ParameterHolder[this.prepareResult.getParamCount()];
        for (int i = 0; i < holder.length; ++i) {
            holder[i] = this.parameters[i];
            if (holder[i] == null) {
                JDBC4PreparedStatement.logger.error("You need to set exactly " + this.prepareResult.getParamCount() + " parameters on the prepared statement");
                throw this.exceptionFactory.raiseStatementError(this.connection, this).create("You need to set exactly " + this.prepareResult.getParamCount() + " parameters on the prepared statement");
            }
        }
        this.parameterList.add(holder);
    }
    
    @Override
    public void addBatch(final String sql) throws SQLException {
        throw this.exceptionFactory.raiseStatementError(this.connection, this).create("Cannot do addBatch(String) on preparedStatement");
    }
    
    @Override
    public void clearBatch() {
        this.parameterList.clear();
        this.hasLongData = false;
        this.parameters = new ParameterHolder[this.prepareResult.getParamCount()];
    }
    
    @Override
    public int[] executeBatch() throws SQLException {
        this.checkClose();
        final int size = this.parameterList.size();
        if (size == 0) {
            return new int[0];
        }
        this.lock.lock();
        try {
            this.executeInternalBatch(size);
            this.results.commandEnd();
            return this.results.getCmdInformation().getUpdateCounts();
        }
        catch (SQLException sqle) {
            throw this.executeBatchExceptionEpilogue(sqle, size);
        }
        finally {
            this.executeBatchEpilogue();
            this.lock.unlock();
        }
    }
    
    public int[] getServerUpdateCounts() {
        if (this.results != null && this.results.getCmdInformation() != null) {
            return this.results.getCmdInformation().getServerUpdateCounts();
        }
        return new int[0];
    }
    
    @Override
    public long[] executeLargeBatch() throws SQLException {
        this.checkClose();
        final int size = this.parameterList.size();
        if (size == 0) {
            return new long[0];
        }
        this.lock.lock();
        try {
            this.executeInternalBatch(size);
            this.results.commandEnd();
            return this.results.getCmdInformation().getLargeUpdateCounts();
        }
        catch (SQLException sqle) {
            throw this.executeBatchExceptionEpilogue(sqle, size);
        }
        finally {
            this.executeBatchEpilogue();
            this.lock.unlock();
        }
    }
    
    private void executeInternalBatch(final int size) throws SQLException {
        this.executeQueryPrologue(true);
        this.results = new Results(this, 0, true, size, false, this.resultSetScrollType, this.resultSetConcurrency, this.autoGeneratedKeys, this.protocol.getAutoIncrementIncrement(), null, null);
        if (this.protocol.executeBatchClient(this.protocol.isMasterConnection(), this.results, this.prepareResult, this.parameterList, this.hasLongData)) {
            return;
        }
        SQLException exception = null;
        if (this.queryTimeout > 0) {
            for (int batchQueriesCount = 0; batchQueriesCount < size; ++batchQueriesCount) {
                this.protocol.stopIfInterrupted();
                try {
                    this.protocol.executeQuery(this.protocol.isMasterConnection(), this.results, this.prepareResult, this.parameterList.get(batchQueriesCount));
                }
                catch (SQLException e) {
                    if (!this.options.continueBatchOnError) {
                        throw e;
                    }
                    exception = e;
                }
            }
        }
        else {
            for (int batchQueriesCount = 0; batchQueriesCount < size; ++batchQueriesCount) {
                try {
                    this.protocol.executeQuery(this.protocol.isMasterConnection(), this.results, this.prepareResult, this.parameterList.get(batchQueriesCount));
                }
                catch (SQLException e) {
                    if (!this.options.continueBatchOnError) {
                        throw e;
                    }
                    exception = e;
                }
            }
        }
        if (exception != null) {
            throw exception;
        }
    }
    
    @Override
    public ResultSetMetaData getMetaData() throws SQLException {
        this.checkClose();
        final ResultSet rs = this.getResultSet();
        if (rs != null) {
            return rs.getMetaData();
        }
        if (this.resultSetMetaData == null) {
            this.loadParametersData();
        }
        return this.resultSetMetaData;
    }
    
    @Override
    public void setParameter(final int parameterIndex, final ParameterHolder holder) throws SQLException {
        if (parameterIndex >= 1 && parameterIndex < this.prepareResult.getParamCount() + 1) {
            this.parameters[parameterIndex - 1] = holder;
            return;
        }
        String error = "Could not set parameter at position " + parameterIndex + " (values was " + holder.toString() + ")\n" + "Query - conn:" + this.protocol.getServerThreadId() + "(" + (this.protocol.isMasterConnection() ? "M" : "S") + ") ";
        if (this.options.maxQuerySizeToLog > 0) {
            error += " - \"";
            if (this.sqlQuery.length() < this.options.maxQuerySizeToLog) {
                error += this.sqlQuery;
            }
            else {
                error = error + this.sqlQuery.substring(0, this.options.maxQuerySizeToLog) + "...";
            }
            error += "\"";
        }
        else {
            error = error + " - \"" + this.sqlQuery + "\"";
        }
        JDBC4PreparedStatement.logger.error(error);
        throw this.exceptionFactory.raiseStatementError(this.connection, this).create(error);
    }
    
    @Override
    public ParameterMetaData getParameterMetaData() throws SQLException {
        this.checkClose();
        if (this.parameterMetaData == null) {
            this.loadParametersData();
        }
        return this.parameterMetaData;
    }
    
    private void loadParametersData() throws SQLSyntaxErrorException {
        try (final ServerSidePreparedStatement ssps = new ServerSidePreparedStatement(false, this.connection, this.sqlQuery, 1004, 1007, 2, this.exceptionFactory)) {
            this.resultSetMetaData = ssps.getMetaData();
            this.parameterMetaData = ssps.getParameterMetaData();
        }
        catch (Exception exception) {
            this.parameterMetaData = new SimpleParameterMetaData(this.prepareResult.getParamCount());
        }
    }
    
    @Override
    public void clearParameters() {
        this.parameters = new ParameterHolder[this.prepareResult.getParamCount()];
    }
    
    @Override
    public void close() throws SQLException {
        super.close();
    }
    
    protected int getParameterCount() {
        return this.prepareResult.getParamCount();
    }
    
    @Override
    public String toString() {
        final StringBuilder sb = new StringBuilder("sql : '" + this.sqlQuery + "'");
        sb.append(", parameters : [");
        for (int i = 0; i < this.parameters.length; ++i) {
            final ParameterHolder holder = this.parameters[i];
            if (holder == null) {
                sb.append("null");
            }
            else {
                sb.append(holder.toString());
            }
            if (i != this.parameters.length - 1) {
                sb.append(",");
            }
        }
        sb.append("]");
        return sb.toString();
    }
    
    @Override
    public void setArray(final int parameterIndex, final Array array) throws SQLException {
        throw new SQLFeatureNotSupportedException();
    }
    
    protected ClientPrepareResult getPrepareResult() {
        return this.prepareResult;
    }
    
    @Override
    public String asSql() throws SQLException {
        return this.asSql(false);
    }
    
    public String asSql(final boolean quoteStreamsAndUnknowns) throws SQLException {
        final ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
        final PacketOutputStream out = new StandardPacketOutputStream(byteArrayOutputStream, this.options, this.connection.getServerThreadId());
        final ClientPrepareResult clientPrepareResult = this.prepareResult;
        try {
            out.startPacket(0);
            if (clientPrepareResult.isRewriteType()) {
                out.write(clientPrepareResult.getQueryParts().get(0));
                out.write(clientPrepareResult.getQueryParts().get(1));
                for (int i = 0; i < clientPrepareResult.getParamCount(); ++i) {
                    this.parameters[i].writeTo(out);
                    out.write(clientPrepareResult.getQueryParts().get(i + 2));
                }
                out.write(clientPrepareResult.getQueryParts().get(clientPrepareResult.getParamCount() + 2));
            }
            else {
                out.write(clientPrepareResult.getQueryParts().get(0));
                for (int i = 0; i < clientPrepareResult.getParamCount(); ++i) {
                    this.parameters[i].writeTo(out);
                    out.write(clientPrepareResult.getQueryParts().get(i + 1));
                }
            }
            out.flush();
        }
        catch (IOException e) {
            throw new SQLException("IOException :" + e.getMessage());
        }
        final byte[] b = byteArrayOutputStream.toByteArray();
        final byte[] original = Arrays.copyOfRange(b, 4, b.length);
        return new String(original);
    }
    
    static {
        logger = LoggerFactory.getLogger(JDBC4PreparedStatement.class);
    }
}
